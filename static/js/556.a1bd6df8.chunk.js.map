{"version":3,"file":"static/js/556.a1bd6df8.chunk.js","mappings":"wSAEaA,EAAOC,EAAAA,GAAAA,GAAH,2QAaJC,EAAOD,EAAAA,GAAAA,GAAH,+C,SC4CjB,EAnDa,WACX,IAAQE,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAAgCE,EAAAA,EAAAA,UAAS,IAAzC,eAAOC,EAAP,KAAiBC,EAAjB,KACA,GAAkCF,EAAAA,EAAAA,WAAS,GAA3C,eAAOG,EAAP,KAAkBC,EAAlB,KACA,GAA8BJ,EAAAA,EAAAA,WAAS,GAAvC,eAAOK,EAAP,KAAgBC,EAAhB,KAkBA,OAhBAC,EAAAA,EAAAA,YAAU,WAAM,wCACd,WAAuBC,GAAvB,8EACEJ,GAAa,GADf,mBAGuBK,EAAAA,EAAAA,IAAeD,GAHtC,OAGUE,EAHV,OAIIR,EAAYQ,GAJhB,gDAMIJ,GAAW,GANf,yBAQIF,GAAa,GARjB,6EADc,sBAaVN,GAbW,SAAD,2BAaDa,CAAQb,EACtB,GAAE,CAACA,IAEAK,GAAkB,SAACS,EAAA,EAAD,IAElBP,EAAgB,KAEfJ,EAASY,QAGZ,SAAClB,EAAD,UACGM,EAASa,KAAI,YAAiD,IAA9CC,EAA6C,EAA7CA,QAASC,EAAoC,EAApCA,KAAMC,EAA8B,EAA9BA,UAAWC,EAAmB,EAAnBA,aACnCC,EAAaD,EAAY,6DAC2BA,G,q8OAG1D,OACE,UAACrB,EAAD,YACE,gBAAKuB,IAAKD,EAAYE,IAAKL,EAAMM,MAAM,SACvC,0BACE,uBAAIN,OAEN,4BACE,sCADF,IACqBC,OANZF,EAUd,OApBwB,SAACQ,EAAA,EAAD,CAASC,QAAQ,sBAuB/C,C,mMCxDDC,EAAAA,EAAAA,SAAAA,QAAyB,GAEzB,IAAMC,EAAU,mCACVC,EAAW,gCAEJC,EAAmB,mCAAG,6FACZD,EAAW,qBAC1BE,EAAS,CACbC,IAFmBH,kDAGnBI,OAAQ,CACNC,QAASN,IALoB,UAQPD,EAAAA,EAAAA,GAAMI,GARC,cAQ3BI,EAR2B,yBAS1BA,EAAYvB,KAAKwB,SATS,2CAAH,qDAYnBC,EAAkB,mCAAG,WAAMC,GAAN,gFACbT,EAAW,eACxBE,EAAS,CACbC,IAFiBH,4CAGjBI,OAAQ,CACNC,QAASN,EACTU,MAAAA,EACAC,SAAU,QACVC,eAAe,IARa,UAWNb,EAAAA,EAAAA,GAAMI,GAXA,cAW1BI,EAX0B,yBAYzBA,EAAYvB,KAAKwB,SAZQ,2CAAH,sDAelBK,EAAiB,mCAAG,WAAM/B,GAAN,kFACzBgC,EADyB,UACVb,EADU,iBACOnB,GAChCqB,EAAS,CACbC,IAAKU,EACLT,OAAQ,CACNC,QAASN,EACTW,SAAU,UANiB,UASLZ,EAAAA,EAAAA,GAAMI,GATD,cASzBI,EATyB,yBAUxBA,EAAYvB,MAVY,2CAAH,sDAajBD,EAAc,mCAAG,WAAMD,GAAN,kFACtBgC,EADsB,UACPb,EADO,iBACUnB,EADV,YAEtBqB,EAAS,CACbC,IAAKU,EACLT,OAAQ,CACNC,QAASN,EACTW,SAAU,UANc,UASFZ,EAAAA,EAAAA,GAAMI,GATJ,cAStBI,EATsB,yBAUrBA,EAAYvB,KAAK+B,MAVI,2CAAH,sDAadC,EAAiB,mCAAG,WAAMlC,GAAN,kFACzBgC,EADyB,UACVb,EADU,iBACOnB,EADP,YAEzBqB,EAAS,CACbC,IAAKU,EACLT,OAAQ,CACNC,QAASN,EACTW,SAAU,UANiB,UASLZ,EAAAA,EAAAA,GAAMI,GATD,cASzBI,EATyB,yBAUxBA,EAAYvB,KAAKwB,SAVO,2CAAH,qD","sources":["components/Cast/Cast.styled.js","components/Cast/Cast.jsx","services/MovieService.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const List = styled.ul`\n  display: grid;\n  max-width: 100vw;\n  grid-template-columns: repeat(auto-fill, minmax(180px, 1fr));\n  grid-gap: 16px;\n  margin-top: 0;\n  margin-bottom: 0;\n  padding: 0;\n  list-style: none;\n  margin-left: auto;\n  margin-right: auto;\n`;\n\nexport const Item = styled.li`\n  text-align: center;\n`;\n","import { useState, useEffect } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'services/MovieService';\nimport Loader from 'components/Loader/Loader';\nimport Warning from 'components/Warning/Warning';\nimport noProfile from 'images/no-profile.png';\nimport { List, Item } from './Cast.styled';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [castData, setCastData] = useState([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  useEffect(() => {\n    async function getCast(id) {\n      setIsLoading(true);\n      try {\n        const data = await fetchMovieCast(id);\n        setCastData(data);\n      } catch (error) {\n        setIsError(true);\n      } finally {\n        setIsLoading(false);\n      }\n    }\n\n    if (movieId) getCast(movieId);\n  }, [movieId]);\n\n  if (isLoading) return <Loader />;\n\n  if (isError) return null;\n\n  if (!castData.length) return <Warning message=\"No cast info found\" />;\n\n  return (\n    <List>\n      {castData.map(({ cast_id, name, character, profile_path }) => {\n        const profileImg = profile_path\n          ? `https://www.themoviedb.org/t/p/w300_and_h450_bestv2${profile_path}`\n          : noProfile;\n\n        return (\n          <Item key={cast_id}>\n            <img src={profileImg} alt={name} width=\"150\" />\n            <div>\n              <b>{name}</b>\n            </div>\n            <div>\n              <i>Character:</i> {character}\n            </div>\n          </Item>\n        );\n      })}\n    </List>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\naxios.defaults.baseURL = '';\n\nconst API_KEY = '1d78fd1734a54a82c67aadef48a71616';\nconst BASE_URL = 'https://api.themoviedb.org/3/';\n\nexport const fetchTrendingMovies = async () => {\n  const TRENDING_URL = BASE_URL + 'trending/movie/day';\n  const config = {\n    url: TRENDING_URL,\n    params: {\n      api_key: API_KEY,\n    },\n  };\n  const fetchedData = await axios(config);\n  return fetchedData.data.results;\n};\n\nexport const fetchMoviesByQuery = async query => {\n  const SEARCH_URL = BASE_URL + 'search/movie';\n  const config = {\n    url: SEARCH_URL,\n    params: {\n      api_key: API_KEY,\n      query,\n      language: 'en-US',\n      include_adult: false,\n    },\n  };\n  const fetchedData = await axios(config);\n  return fetchedData.data.results;\n};\n\nexport const fetchMovieDetails = async id => {\n  const MOVIE_URL = `${BASE_URL}movie/${id}`;\n  const config = {\n    url: MOVIE_URL,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  };\n  const fetchedData = await axios(config);\n  return fetchedData.data;\n};\n\nexport const fetchMovieCast = async id => {\n  const MOVIE_URL = `${BASE_URL}movie/${id}/credits`;\n  const config = {\n    url: MOVIE_URL,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  };\n  const fetchedData = await axios(config);\n  return fetchedData.data.cast;\n};\n\nexport const fetchMovieReviews = async id => {\n  const MOVIE_URL = `${BASE_URL}movie/${id}/reviews`;\n  const config = {\n    url: MOVIE_URL,\n    params: {\n      api_key: API_KEY,\n      language: 'en-US',\n    },\n  };\n  const fetchedData = await axios(config);\n  return fetchedData.data.results;\n};\n"],"names":["List","styled","Item","movieId","useParams","useState","castData","setCastData","isLoading","setIsLoading","isError","setIsError","useEffect","id","fetchMovieCast","data","getCast","Loader","length","map","cast_id","name","character","profile_path","profileImg","src","alt","width","Warning","message","axios","API_KEY","BASE_URL","fetchTrendingMovies","config","url","params","api_key","fetchedData","results","fetchMoviesByQuery","query","language","include_adult","fetchMovieDetails","MOVIE_URL","cast","fetchMovieReviews"],"sourceRoot":""}